# A Spatial annual climatology 

from glob import glob
from pathlib import Path
import numpy as np, pandas as pd, xarray as xr
import matplotlib.pyplot as plt

# convert to np.NaN if missing
import numpy as _np
if not hasattr(_np, "NaN"):
    _np.NaN = _np.nan
import marineHeatWaves as mhw


FILES_GLOB = "/home/deepak/Desktop/CAS_deepak/Noah_data_1982-2024_SST_daily_mean/sst.day.mean.*.nc"
VAR = "sst"
CLIM_YEARS = (1982, 2024)
REGIONS = {
    "ArabianSea":    {"lon_min": 20.0, "lon_max": 78.0,  "lat_min": 0.0, "lat_max": 25.0},
    "BayOfBengal":   {"lon_min": 78.0, "lon_max": 100.0, "lat_min": 0.0, "lat_max": 25.0},
    "NorthIndianOc": {"lon_min": 20.0, "lon_max": 100.0, "lat_min": 0.0, "lat_max": 25.0},
}

def open_ds(globpat, chunks={"time": 120}, engine="netcdf4"):
    paths = sorted(glob(globpat))
    if not paths:
        raise FileNotFoundError(f"No files match: {globpat}")
    return xr.open_mfdataset(paths, combine="by_coords", parallel=True, chunks=chunks, engine=engine)

def subset_box(ds, box):
    latn = "lat" if "lat" in ds.coords else "latitude"
    lonn = "lon" if "lon" in ds.coords else "longitude"
    return ds.sel({latn: slice(box["lat_min"], box["lat_max"]),
                   lonn: slice(box["lon_min"], box["lon_max"])})

# compute time to ordinals & DOY once 
ds = open_ds(FILES_GLOB, chunks={"time": 120}, engine="netcdf4")
assert VAR in ds, f"{VAR} missing"
t_index = pd.to_datetime(ds.time.values)
ords = np.array([d.toordinal() for d in t_index], dtype=int)
doy  = t_index.dayofyear.values
years = t_index.year.values

def _seas_doy_for_pixel(temp_1d, ords, years, doy, clim_years):
    """Return DOY=1..366 seas for one pixel using Hobday/Oliver detect."""
    if np.all(np.isnan(temp_1d)):
        return np.full(366, np.nan, float)
    y0 = max(clim_years[0], int(np.nanmin(years)))
    y1 = min(clim_years[1], int(np.nanmax(years)))

    # (pctile=90, minDuration=5, windowHalfWidth=5)
    try:
        res, clim = mhw.detect(ords, np.asarray(temp_1d, float),
                               climatologyPeriod=[y0, y1], pctile=90)
        seas_full = np.asarray(clim["seas"], float)
    except Exception:
        return np.full(366, np.nan, float)

    # avarage by DOY to get 366-length curve
    seas_366 = np.full(366, np.nan, float)
    for d in range(1, 367):
        m = (doy == d)
        if m.any():
            seas_366[d-1] = np.nanmean(seas_full[m])
    return seas_366

# vectorize across lat/lon with apply_ufunc
def spatial_climatology(ds_region):
    da = ds_region[VAR].chunk({"time": -1, "lat": 80, "lon": 80})
    # now call apply_ufunc 
    seas_doy = xr.apply_ufunc(_seas_doy_for_pixel, da,
    input_core_dims=[["time"]],
    output_core_dims=[["doy"]],
    vectorize=True, dask="parallelized",
    kwargs=dict(ords=ords, years=years, doy=doy, clim_years=CLIM_YEARS),
    output_dtypes=[float],
    output_sizes={"doy": 366},
    )
    # annual spatial climatology = mean over DOY (all 366 days)
    annual_clim = seas_doy.mean("doy", skipna=True)
    return annual_clim  # (lat, lon)

# plot 
for name, box in REGIONS.items():
    ds_r = subset_box(ds[[VAR]], box)
    annual_map = spatial_climatology(ds_r)

    plt.figure(figsize=(7.5, 4))
    im = annual_map.plot.imshow(add_colorbar=True)
    plt.title(f"{name} â€” Annual Climatology (Hobday seas, mean over DOY)")
    plt.xlabel("Longitude"); plt.ylabel("Latitude")
    plt.tight_layout(); plt.show()