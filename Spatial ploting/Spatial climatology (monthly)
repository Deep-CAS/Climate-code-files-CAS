# Spatial monthly climatology maps (12 months) 
"""Run this code file after the annual climate spatial plot to consider preprocessing and loading the data"""
# reference mapping DOY to month (leap year)
_ref = pd.date_range("2000-01-01", "2000-12-31", freq="D")
doy_to_month = pd.Series(_ref.month.values, index=_ref.dayofyear.values)

# precompute ordinals/DOY from the master time axis
ds0 = open_ds(FILES_GLOB, engine="netcdf4")
t_index = pd.to_datetime(ds0.time.values)
ords = np.array([d.toordinal() for d in t_index], dtype=int)
doy  = t_index.dayofyear.values
years = t_index.year.values

def _seas_doy_for_pixel(temp_1d, ords, years, doy, clim_years):
    if np.all(np.isnan(temp_1d)):
        return np.full(366, np.nan, float)
    y0 = max(clim_years[0], int(np.nanmin(years)))
    y1 = min(clim_years[1], int(np.nanmax(years)))
    try:
        res, clim = mhw.detect(ords, np.asarray(temp_1d, float),
                               climatologyPeriod=[y0, y1], pctile=90)
        seas_full = np.asarray(clim["seas"], float)
    except Exception:
        return np.full(366, np.nan, float)
    seas_366 = np.full(366, np.nan, float)
    for d in range(1, 367):
        m = (doy == d)
        if m.any():
            seas_366[d-1] = np.nanmean(seas_full[m])
    return seas_366

def spatial_monthly_climatology(ds_region):
    da = ds_region[VAR].chunk({"time": -1, "lat": 80, "lon": 80})
    # now call apply_ufunc as you already do
    seas_doy = xr.apply_ufunc(
    _seas_doy_for_pixel, da,
    input_core_dims=[["time"]],
    output_core_dims=[["doy"]],
    vectorize=True, dask="parallelized",
    kwargs=dict(ords=ords, years=years, doy=doy, clim_years=CLIM_YEARS),
    output_dtypes=[float],
    output_sizes={"doy": 366},)

    # build month masks for DOY
    month_maps = []
    for m in range(1, 13):
        idx = np.where(doy_to_month.index.map(int).to_numpy() == m)[0]  # DOYs for month m (0-based for 'doy' dim)
        # DOY indices are 1..366; convert to 0..365
        idx0 = idx  # already 0-based since we used index positions
        month_maps.append(seas_doy.isel(doy=idx0).mean("doy", skipna=True))
    # stack into a DataArray with 'month' dim
    month_da = xr.concat(month_maps, dim="month")
    month_da = month_da.assign_coords(month=np.arange(1, 13))
    return month_da  # (month, lat, lon)

# plot
for name, box in REGIONS.items():
    ds_r = subset_box(ds0[[VAR]], box)
    month_da = spatial_monthly_climatology(ds_r)  # (month, lat, lon)

    # Example: plot a 3x4 grid of months
    fig, axes = plt.subplots(3, 4, figsize=(12, 7), constrained_layout=True)
    for m in range(1, 13):
        ax = axes[(m-1)//4, (m-1)%4]
        month_da.sel(month=m).plot.imshow(ax=ax, add_colorbar=False)
        ax.set_title(["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][m-1])
        ax.set_xlabel("Lon"); ax.set_ylabel("Lat")
    
    cbar = fig.colorbar(plt.cm.ScalarMappable(norm=axes[0,0].images[0].norm,
                                              cmap=axes[0,0].images[0].get_cmap()),
                        ax=axes, orientation="vertical", fraction=0.025)
    cbar.set_label("Temp (°C)")
    fig.suptitle(f"{name} — Monthly Climatology of Hobday seas (1982–2024)", y=1.02)
    plt.show()
