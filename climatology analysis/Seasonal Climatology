# Seasonal climatology & 90th percentile threshold

from glob import glob
from pathlib import Path
import numpy as np, pandas as pd, xarray as xr
import matplotlib.pyplot as plt

CLIM_YEARS: Tuple[int,int] = (1982, 2024) 
SEASONS = {
    "DJF": [12, 1, 2],
    "MAM": [3, 4, 5],
    "JJA": [6, 7, 8],
    "SON": [9, 10, 11],
}

season_order = ["DJF", "MAM", "JJA", "SON"]

def open_ds(globpat, chunks={"time": 120}, engine="netcdf4"):
    return xr.open_mfdataset(sorted(glob(globpat)), combine="by_coords",
                             chunks=chunks, engine=engine)

def subset_box(ds: xr.Dataset, box: Dict[str, float]) -> xr.Dataset:
    latn = "lat" if "lat" in ds.coords else "latitude"
    lonn = "lon" if "lon" in ds.coords else "longitude"
    return ds.sel({latn: slice(box["lat_min"], box["lat_max"]),
                   lonn: slice(box["lon_min"], box["lon_max"])})

def area_weighted_boxmean(da: xr.DataArray) -> xr.DataArray:
    latn = "lat" if "lat" in da.coords else "latitude"
    w = np.cos(np.deg2rad(da[latn]))
    return da.weighted(w).mean(dim=[latn, "lon" if "lon" in da.coords else "longitude"])

def boxmean_doy_curves_seas(da_box: xr.DataArray, baseline=(1982,2024)):
    
    t = da_box.time.to_index()
    y0, y1 = max(baseline[0], t.year.min()), min(baseline[1], t.year.max())
    ords = np.array([d.toordinal() for d in t], dtype=int)
    temp = da_box.values.astype(float)
    res, clim = mhw.detect(ords, temp, climatologyPeriod=[int(y0), int(y1)], pctile=90)
    seas_full   = np.asarray(clim["seas"],   float)
    thresh_full = np.asarray(clim["thresh"], float)
    doy = t.dayofyear.values
    seas_doy   = np.full(366, np.nan)
    thresh_doy = np.full(366, np.nan)
    for d in range(1, 367):
        m = (doy == d)
        if m.any():
            seas_doy[d-1]   = np.nanmean(seas_full[m])
            thresh_doy[d-1] = np.nanmean(thresh_full[m])
    return seas_doy, thresh_doy 

# # leap-aware mapping DOY→month (has 366 days)
ref = pd.date_range("2000-01-01", "2000-12-31", freq="D")
doy_month = np.array(ref.month.values)             


ds0 = open_ds(FILES_GLOB, engine="netcdf4")
results = {}
for name, box in REGIONS.items():
    ds_r   = subset_box(ds0[[VAR]], box)
    da_box = area_weighted_boxmean(ds_r[VAR]).rename("sst_boxmean")

    seas_doy, thresh_doy = boxmean_doy_curves_seas(da_box, CLIM_YEARS)

    # seasonal aggregation from DOY 
    seas_vals   = []
    thresh_vals = []
    seas_vals, thresh_vals = [], []
    for s in season_order:
        months = SEASONS[s]
        mask = np.isin(doy_month, months)  # boolean length 366
        seas_vals.append(np.nanmean(seas_doy[mask]))
        thresh_vals.append(np.nanmean(thresh_doy[mask]))
    results[name] = {"seas": np.array(seas_vals), "thresh": np.array(thresh_vals)}

    # plot figures
    seasons_order = ["DJF", "MAM", "JJA", "SON"]
    

x= np.arange(4)
fig, axes = plt.subplots(nrows=3, ncols=1, figsize=(11, 8), sharex=True, constrained_layout=True)

# use common y-limits for comparability
all_vals = np.concatenate([np.r_[v["seas"], v["thresh"]] for v in results.values()])
ymin = float(np.nanmin(all_vals)) - 0.2
ymax = float(np.nanmax(all_vals)) + 0.2

for ax, nm in zip(axes, results.keys()):
    ms= results[nm]["seas"]
    mt= results[nm]["thresh"]

    ax.plot(x, ms,   marker="o", lw=1.6, color="C0", label="Climatology (seasonal)")
    ax.plot(x, mt, marker="s", lw=1.6, ls="--", color="#ff7f0e", label="90th percentile threshold")
    ax.set_ylabel("Temp (°C)")
    ax.set_title(f"{nm}: Seasonal Climatology & 90th perc threshold ({CLIM_YEARS[0]}–{CLIM_YEARS[1]})")
    ax.legend(loc="upper right")
    ax.set_ylim(ymin, ymax)

# format the shared x-axis on the bottom subplot
axes[-1].set_xticks(x, seasons_order)
axes[-1].set_xlabel("Season")
plt.show()